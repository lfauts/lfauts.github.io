[{"title":"Mac环境下安装Gitbook","date":"2018-10-15T15:48:11.000Z","path":"2018/10/15/Mac环境下安装Gitbook/","text":"项目组最近打算做一个知识经验分享的工具，初步了解了有如下几种方案：wiki，hexo+github page，gitbook + github。本文主要讲解Mac系统基于gitbook + github来搭建知识经验分享平台。 安装依赖环境首先需要安装node.js，在node.js官网下载，直接安装。下载地址：https://nodejs.org/en/1这里需要注意的是，node.js有两个版本，一个是大多数人使用的，也就是稳定版；另一个是最新版，拥有最新的特性。在这里，我们下载稳定版即可。","tags":[]},{"title":"gitlab安装指南","date":"2018-10-15T13:08:11.000Z","path":"2018/10/15/gitlab安装指南/","text":"Installation from sourceConsider the Omnibus package installationSince an installation from source is a lot of work and error prone we strongly recommend the fast and reliable Omnibus package installation (deb/rpm). One reason the Omnibus package is more reliable is its use of Runit to restart any of the GitLab processes in case one crashes.On heavily used GitLab instances the memory usage of the Sidekiq background worker will grow over time.Omnibus packages solve this by letting the Sidekiq terminate gracefully if it uses too much memory.After this termination Runit will detect Sidekiq is not running and will start it.Since installations from source don’t have Runit, Sidekiq can’t be terminated and its memory usage will grow over time. Select Version to InstallMake sure you view this installation guide from the branch (version) of GitLab you would like to install (e.g., 11-2-stable).You can select the branch in the version dropdown in the top left corner of GitLab (below the menu bar). If the highest number stable branch is unclear please check the GitLab Blog for installation guide links by version. Important NotesThis guide is long because it covers many cases and includes all commands you need, this is one of the few installation scripts that actually works out of the box. This installation guide was created for and tested on Debian/Ubuntu operating systems. Please read requirements.md for hardware and operating system requirements. If you want to install on RHEL/CentOS we recommend using the Omnibus packages. This is the official installation guide to set up a production server. To set up a development installation or for many other installation options please see the installation section of the readme. The following steps have been known to work. Please use caution when you deviate from this guide. Make sure you don’t violate any assumptions GitLab makes about its environment. For example many people run into permission problems because they changed the location of directories or run services as the wrong user. If you find a bug/error in this guide please submit a merge requestfollowing thecontributing guide. OverviewThe GitLab installation consists of setting up the following components: Packages / Dependencies Ruby Go Node System Users Database Redis GitLab Nginx 1. Packages / Dependenciessudo is not installed on Debian by default. Make sure your system isup-to-date and install it. # run as root! apt-get update -y apt-get upgrade -y apt-get install sudo -y Note: During this installation some files will need to be edited manually. If you are familiar with vim set it as default editor with the commands below. If you are not familiar with vim please skip this and keep using the default editor. # Install vim and set as default editor sudo apt-get install -y vim sudo update-alternatives --set editor /usr/bin/vim.basic Install the required packages (needed to compile Ruby and native extensions to Ruby gems): sudo apt-get install -y build-essential zlib1g-dev libyaml-dev libssl-dev libgdbm-dev libre2-dev libreadline-dev libncurses5-dev libffi-dev curl openssh-server checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libicu-dev logrotate rsync python-docutils pkg-config cmake Ubuntu 14.04 (Trusty Tahr) doesn’t have the libre2-dev package available, butyou can install re2 manually. If you want to use Kerberos for user authentication, then install libkrb5-dev: sudo apt-get install libkrb5-dev Note: If you don’t know what Kerberos is, you can assume you don’t need it. Make sure you have the right version of Git installed # Install Git sudo apt-get install -y git-core # Make sure Git is version 2.9.5 or higher git --version Is the system packaged Git too old? Remove it and compile from source. # Remove packaged Git sudo apt-get remove git-core # Install dependencies sudo apt-get install -y libcurl4-openssl-dev libexpat1-dev gettext libz-dev libssl-dev build-essential # Download and compile from source cd /tmp curl --remote-name --progress https://www.kernel.org/pub/software/scm/git/git-2.18.0.tar.gz echo &apos;94faf2c0b02a7920b0b46f4961d8e9cad08e81418614102898a55f980fa3e7e4 git-2.18.0.tar.gz&apos; | shasum -a256 -c - &amp;&amp; tar -xzf git-2.18.0.tar.gz cd git-2.18.0/ ./configure make prefix=/usr/local all # Install into /usr/local/bin sudo make prefix=/usr/local install # When editing config/gitlab.yml (Step 5), change the git -&gt; bin_path to /usr/local/bin/git Note: In order to receive mail notifications, make sure to install a mail server. By default, Debian is shipped with exim4 but this has problems while Ubuntu does not ship with one. The recommended mail server is postfix and you can install it with: sudo apt-get install -y postfix Then select ‘Internet Site’ and press enter to confirm the hostname. 2. RubyThe Ruby interpreter is required to run GitLab. Note: The current supported Ruby (MRI) version is 2.3.x. GitLab 9.0 droppedsupport for Ruby 2.1.x. The use of Ruby version managers such as RVM, rbenv or chruby with GitLabin production, frequently leads to hard to diagnose problems. For example,GitLab Shell is called from OpenSSH, and having a version manager can preventpushing and pulling over SSH. Version managers are not supported and we stronglyadvise everyone to follow the instructions below to use a system Ruby. Linux distributions generally have older versions of Ruby available, so theseinstructions are designed to install Ruby from the official source code. Remove the old Ruby 1.8 if present: sudo apt-get remove ruby1.8 Download Ruby and compile it: mkdir /tmp/ruby &amp;&amp; cd /tmp/ruby curl --remote-name --progress https://cache.ruby-lang.org/pub/ruby/2.4/ruby-2.4.4.tar.gz echo &apos;ec82b0d53bd0adad9b19e6b45e44d54e9ec3f10c ruby-2.4.4.tar.gz&apos; | shasum -c - &amp;&amp; tar xzf ruby-2.4.4.tar.gz cd ruby-2.4.4 ./configure --disable-install-rdoc make sudo make install Then install the Bundler Gem: sudo gem install bundler --no-ri --no-rdoc 3. GoSince GitLab 8.0, GitLab has several daemons written in Go. To installGitLab we need a Go compiler. The instructions below assume you use 64-bitLinux. You can find downloads for other platforms at the Go downloadpage. # Remove former Go installation folder sudo rm -rf /usr/local/go curl --remote-name --progress https://dl.google.com/go/go1.10.3.linux-amd64.tar.gz echo &apos;fa1b0e45d3b647c252f51f5e1204aba049cde4af177ef9f2181f43004f901035 go1.10.3.linux-amd64.tar.gz&apos; | shasum -a256 -c - &amp;&amp; \\ sudo tar -C /usr/local -xzf go1.10.3.linux-amd64.tar.gz sudo ln -sf /usr/local/go/bin/{go,godoc,gofmt} /usr/local/bin/ rm go1.10.3.linux-amd64.tar.gz 4. NodeSince GitLab 8.17, GitLab requires the use of Node to compile javascriptassets, and Yarn to manage javascript dependencies. The current minimumrequirements for these are node &gt;= v6.0.0 and yarn &gt;= v1.2.0. In many distrosthe versions provided by the official package repositories are out of date, sowe’ll need to install through the following commands: # install node v8.x curl --location https://deb.nodesource.com/setup_8.x | sudo bash - sudo apt-get install -y nodejs curl --silent --show-error https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - echo &quot;deb https://dl.yarnpkg.com/debian/ stable main&quot; | sudo tee /etc/apt/sources.list.d/yarn.list sudo apt-get update sudo apt-get install yarn Visit the official websites for node and yarn if you have any trouble with these steps. 5. System UsersCreate a git user for GitLab: sudo adduser --disabled-login --gecos &apos;GitLab&apos; git 6. DatabaseWe recommend using a PostgreSQL database. For MySQL check theMySQL setup guide. Note: because we need to make use of extensions and concurrent index removal,you need at least PostgreSQL 9.2. Install the database packages: 1sudo apt-get install -y postgresql postgresql-client libpq-dev postgresql-contrib Create a database user for GitLab: 1sudo -u postgres psql -d template1 -c \"CREATE USER git CREATEDB;\" Create the pg_trgm extension (required for GitLab 8.6+): 1sudo -u postgres psql -d template1 -c \"CREATE EXTENSION IF NOT EXISTS pg_trgm;\" Create the GitLab production database and grant all privileges on database: 1sudo -u postgres psql -d template1 -c \"CREATE DATABASE gitlabhq_production OWNER git;\" Try connecting to the new database with the new user: 1sudo -u git -H psql -d gitlabhq_production Check if the pg_trgm extension is enabled: 1234SELECT true AS enabledFROM pg_available_extensionsWHERE name = 'pg_trgm'AND installed_version IS NOT NULL; If the extension is enabled this will produce the following output: 1234enabled--------- t(1 row) Quit the database session: 1gitlabhq_production&gt; \\q 7. RedisGitLab requires at least Redis 2.8. If you are using Debian 8 or Ubuntu 14.04 and up, then you can simply installRedis 2.8 with: 1sudo apt-get install redis-server If you are using Debian 7 or Ubuntu 12.04, follow the special documentationon an alternate Redis installation. Once done, follow the rest ofthe guide here. 123456789101112131415161718192021222324252627# Configure redis to use socketssudo cp /etc/redis/redis.conf /etc/redis/redis.conf.orig# Disable Redis listening on TCP by setting &apos;port&apos; to 0sed &apos;s/^port .*/port 0/&apos; /etc/redis/redis.conf.orig | sudo tee /etc/redis/redis.conf# Enable Redis socket for default Debian / Ubuntu pathecho &apos;unixsocket /var/run/redis/redis.sock&apos; | sudo tee -a /etc/redis/redis.conf# Grant permission to the socket to all members of the redis groupecho &apos;unixsocketperm 770&apos; | sudo tee -a /etc/redis/redis.conf# Create the directory which contains the socketmkdir /var/run/redischown redis:redis /var/run/redischmod 755 /var/run/redis# Persist the directory which contains the socket, if applicableif [ -d /etc/tmpfiles.d ]; then echo &apos;d /var/run/redis 0755 redis redis 10d -&apos; | sudo tee -a /etc/tmpfiles.d/redis.conffi# Activate the changes to redis.confsudo service redis-server restart# Add git to the redis groupsudo usermod -aG redis git 8. GitLab# We&apos;ll install GitLab into home directory of the user &quot;git&quot; cd /home/git Clone the Source# Clone GitLab repository sudo -u git -H git clone https://gitlab.com/gitlab-org/gitlab-ce.git -b 11-2-stable gitlab Note: You can change 11-2-stable to master if you want the bleeding edge version, but never install master on a production server! Configure It# Go to GitLab installation folder cd /home/git/gitlab # Copy the example GitLab config sudo -u git -H cp config/gitlab.yml.example config/gitlab.yml # Update GitLab config file, follow the directions at top of file sudo -u git -H editor config/gitlab.yml # Copy the example secrets file sudo -u git -H cp config/secrets.yml.example config/secrets.yml sudo -u git -H chmod 0600 config/secrets.yml # Make sure GitLab can write to the log/ and tmp/ directories sudo chown -R git log/ sudo chown -R git tmp/ sudo chmod -R u+rwX,go-w log/ sudo chmod -R u+rwX tmp/ # Make sure GitLab can write to the tmp/pids/ and tmp/sockets/ directories sudo chmod -R u+rwX tmp/pids/ sudo chmod -R u+rwX tmp/sockets/ # Create the public/uploads/ directory sudo -u git -H mkdir public/uploads/ # Make sure only the GitLab user has access to the public/uploads/ directory # now that files in public/uploads are served by gitlab-workhorse sudo chmod 0700 public/uploads # Change the permissions of the directory where CI job traces are stored sudo chmod -R u+rwX builds/ # Change the permissions of the directory where CI artifacts are stored sudo chmod -R u+rwX shared/artifacts/ # Change the permissions of the directory where GitLab Pages are stored sudo chmod -R ug+rwX shared/pages/ # Copy the example Unicorn config sudo -u git -H cp config/unicorn.rb.example config/unicorn.rb # Find number of cores nproc # Enable cluster mode if you expect to have a high load instance # Set the number of workers to at least the number of cores # Ex. change amount of workers to 3 for 2GB RAM server sudo -u git -H editor config/unicorn.rb # Copy the example Rack attack config sudo -u git -H cp config/initializers/rack_attack.rb.example config/initializers/rack_attack.rb # Configure Git global settings for git user # &apos;autocrlf&apos; is needed for the web editor sudo -u git -H git config --global core.autocrlf input # Disable &apos;git gc --auto&apos; because GitLab already runs &apos;git gc&apos; when needed sudo -u git -H git config --global gc.auto 0 # Enable packfile bitmaps sudo -u git -H git config --global repack.writeBitmaps true # Enable push options sudo -u git -H git config --global receive.advertisePushOptions true # Configure Redis connection settings sudo -u git -H cp config/resque.yml.example config/resque.yml # Change the Redis socket path if you are not using the default Debian / Ubuntu configuration sudo -u git -H editor config/resque.yml Important Note: Make sure to edit both gitlab.yml and unicorn.rb to match your setup. Note: If you want to use HTTPS, see Using HTTPS for the additional steps. Configure GitLab DB Settings# PostgreSQL only: sudo -u git cp config/database.yml.postgresql config/database.yml # MySQL only: sudo -u git cp config/database.yml.mysql config/database.yml # MySQL and remote PostgreSQL only: # Update username/password in config/database.yml. # You only need to adapt the production settings (first part). # If you followed the database guide then please do as follows: # Change &apos;secure password&apos; with the value you have given to $password # You can keep the double quotes around the password sudo -u git -H editor config/database.yml # PostgreSQL and MySQL: # Make config/database.yml readable to git only sudo -u git -H chmod o-rwx config/database.yml Install GemsNote: As of bundler 1.5.2, you can invoke bundle install -jN (where N the number of your processor cores) and enjoy the parallel gems installation with measurable difference in completion time (~60% faster). Check the number of your cores with nproc. For more information check this post. First make sure you have bundler &gt;= 1.5.2 (run bundle -v) as it addresses some issues that were fixed in 1.5.2. # For PostgreSQL (note, the option says &quot;without ... mysql&quot;) sudo -u git -H bundle install --deployment --without development test mysql aws kerberos # Or if you use MySQL (note, the option says &quot;without ... postgres&quot;) sudo -u git -H bundle install --deployment --without development test postgres aws kerberos Note: If you want to use Kerberos for user authentication, then omit kerberos in the --without option above. Install GitLab ShellGitLab Shell is an SSH access and repository management software developed specially for GitLab. # Run the installation task for gitlab-shell (replace `REDIS_URL` if needed): sudo -u git -H bundle exec rake gitlab:shell:install REDIS_URL=unix:/var/run/redis/redis.sock RAILS_ENV=production SKIP_STORAGE_VALIDATION=true # By default, the gitlab-shell config is generated from your main GitLab config. # You can review (and modify) the gitlab-shell config as follows: sudo -u git -H editor /home/git/gitlab-shell/config.yml Note: If you want to use HTTPS, see Using HTTPS for the additional steps. Note: Make sure your hostname can be resolved on the machine itself by either a proper DNS record or an additional line in /etc/hosts (“127.0.0.1 hostname”). This might be necessary for example if you set up GitLab behind a reverse proxy. If the hostname cannot be resolved, the final installation check will fail with “Check GitLab API access: FAILED. code: 401” and pushing commits will be rejected with “[remote rejected] master -&gt; master (hook declined)”. Note: GitLab Shell application startup time can be greatly reduced by disabling RubyGems. This can be done in several manners: Export RUBYOPT=--disable-gems environment variable for the processes Compile Ruby with configure --disable-rubygems to disable RubyGems by default. Not recommended for system-wide Ruby. Omnibus GitLab replaces the shebang line of the gitlab-shell/bin/* scripts Install gitlab-workhorseGitLab-Workhorse uses GNU Make. Thefollowing command-line will install GitLab-Workhorse in /home/git/gitlab-workhorsewhich is the recommended location. sudo -u git -H bundle exec rake &quot;gitlab:workhorse:install[/home/git/gitlab-workhorse]&quot; RAILS_ENV=production You can specify a different Git repository by providing it as an extra parameter: sudo -u git -H bundle exec rake &quot;gitlab:workhorse:install[/home/git/gitlab-workhorse,https://example.com/gitlab-workhorse.git]&quot; RAILS_ENV=production Install gitlab-pagesGitLab-Pages uses GNU Make. This step is optional and only needed if you wish to host static sites from within GitLab. The following commands will install GitLab-Pages in /home/git/gitlab-pages. For additional setup steps, please consult the administration guide for your version of GitLab as the GitLab Pages daemon can be ran several different ways. cd /home/git sudo -u git -H git clone https://gitlab.com/gitlab-org/gitlab-pages.git cd gitlab-pages sudo -u git -H git checkout v$(&lt;/home/git/gitlab/GITLAB_PAGES_VERSION) sudo -u git -H make Install Gitaly# Fetch Gitaly source with Git and compile with Go sudo -u git -H bundle exec rake &quot;gitlab:gitaly:install[/home/git/gitaly]&quot; RAILS_ENV=production You can specify a different Git repository by providing it as an extra parameter: sudo -u git -H bundle exec rake &quot;gitlab:gitaly:install[/home/git/gitaly,https://example.com/gitaly.git]&quot; RAILS_ENV=production Next, make sure gitaly configured: # Restrict Gitaly socket access sudo chmod 0700 /home/git/gitlab/tmp/sockets/private sudo chown git /home/git/gitlab/tmp/sockets/private # If you are using non-default settings you need to update config.toml cd /home/git/gitaly sudo -u git -H editor config.toml For more information about configuring Gitaly seedoc/administration/gitaly. Initialize Database and Activate Advanced Featuressudo -u git -H bundle exec rake gitlab:setup RAILS_ENV=production # Type &apos;yes&apos; to create the database tables. # or you can skip the question by adding force=yes sudo -u git -H bundle exec rake gitlab:setup RAILS_ENV=production force=yes # When done you see &apos;Administrator account created:&apos; Note: You can set the Administrator/root password and e-mail by supplying them in environmental variables, GITLAB_ROOT_PASSWORD and GITLAB_ROOT_EMAIL respectively, as seen below. If you don’t set the password (and it is set to the default one) please wait with exposing GitLab to the public internet until the installation is done and you’ve logged into the server the first time. During the first login you’ll be forced to change the default password. sudo -u git -H bundle exec rake gitlab:setup RAILS_ENV=production GITLAB_ROOT_PASSWORD=yourpassword GITLAB_ROOT_EMAIL=youremail Secure secrets.ymlThe secrets.yml file stores encryption keys for sessions and secure variables.Backup secrets.yml someplace safe, but don’t store it in the same place as your database backups.Otherwise your secrets are exposed if one of your backups is compromised. Install Init ScriptDownload the init script (will be /etc/init.d/gitlab): sudo cp lib/support/init.d/gitlab /etc/init.d/gitlab And if you are installing with a non-default folder or user copy and edit the defaults file: sudo cp lib/support/init.d/gitlab.default.example /etc/default/gitlab If you installed GitLab in another directory or as a user other than the default you should change these settings in /etc/default/gitlab. Do not edit /etc/init.d/gitlab as it will be changed on upgrade. Make GitLab start on boot: sudo update-rc.d gitlab defaults 21 Setup Logrotatesudo cp lib/support/logrotate/gitlab /etc/logrotate.d/gitlab Check Application StatusCheck if GitLab and its environment are configured correctly: sudo -u git -H bundle exec rake gitlab:env:info RAILS_ENV=production Compile GetText PO filessudo -u git -H bundle exec rake gettext:compile RAILS_ENV=production Compile Assetssudo -u git -H yarn install --production --pure-lockfile sudo -u git -H bundle exec rake gitlab:assets:compile RAILS_ENV=production NODE_ENV=production Start Your GitLab Instancesudo service gitlab start # or sudo /etc/init.d/gitlab restart 9. NginxNote: Nginx is the officially supported web server for GitLab. If you cannot or do not want to use Nginx as your web server, have a look at the GitLab recipes. Installationsudo apt-get install -y nginx Site ConfigurationCopy the example site config: sudo cp lib/support/nginx/gitlab /etc/nginx/sites-available/gitlab sudo ln -s /etc/nginx/sites-available/gitlab /etc/nginx/sites-enabled/gitlab Make sure to edit the config file to match your setup. Also, ensure that you match your paths to GitLab, especially if installing for a user other than the ‘git’ user: # Change YOUR_SERVER_FQDN to the fully-qualified # domain name of your host serving GitLab. # # Remember to match your paths to GitLab, especially # if installing for a user other than &apos;git&apos;. # # If using Ubuntu default nginx install: # either remove the default_server from the listen line # or else sudo rm -f /etc/nginx/sites-enabled/default sudo editor /etc/nginx/sites-available/gitlab If you intend to enable GitLab pages, there is a separate Nginx config you needto use. Read all about the needed configuration at theGitLab Pages administration guide. Note: If you want to use HTTPS, replace the gitlab Nginx config with gitlab-ssl. See Using HTTPS for HTTPS configuration details. Test ConfigurationValidate your gitlab or gitlab-ssl Nginx config file with the following command: sudo nginx -t You should receive syntax is okay and test is successful messages. If you receive errors check your gitlab or gitlab-ssl Nginx config file for typos, etc. as indicated in the error message given. Restartsudo service nginx restart Done!Double-check Application StatusTo make sure you didn’t miss anything run a more thorough check with: sudo -u git -H bundle exec rake gitlab:check RAILS_ENV=production If all items are green, then congratulations on successfully installing GitLab! NOTE: Supply SANITIZE=true environment variable to gitlab:check to omit project names from the output of the check command. Initial LoginVisit YOUR_SERVER in your web browser for your first GitLab login. If you didn’t provide a root password during setup,you’ll be redirected to a password reset screen to provide the password for theinitial administrator account. Enter your desired password and you’ll beredirected back to the login screen. The default account’s username is root. Provide the password you createdearlier and login. After login you can change the username if you wish. Enjoy! You can use sudo service gitlab start and sudo service gitlab stop to start and stop GitLab. Advanced Setup TipsRelative URL supportSee the Relative URL documentation for more information onhow to configure GitLab with a relative URL. Using HTTPSTo use GitLab with HTTPS: In gitlab.yml: Set the port option in section 1 to 443. Set the https option in section 1 to true. In the config.yml of gitlab-shell: Set gitlab_url option to the HTTPS endpoint of GitLab (e.g. https://git.example.com). Set the certificates using either the ca_file or ca_path option. Use the gitlab-ssl Nginx example config instead of the gitlab config. Update YOUR_SERVER_FQDN. Update ssl_certificate and ssl_certificate_key. Review the configuration file and consider applying other security and performance enhancing features. Using a self-signed certificate is discouraged but if you must use it follow the normal directions then: Generate a self-signed SSL certificate: 1234mkdir -p /etc/nginx/ssl/cd /etc/nginx/ssl/sudo openssl req -newkey rsa:2048 -x509 -nodes -days 3560 -out gitlab.crt -keyout gitlab.keysudo chmod o-r gitlab.key In the config.yml of gitlab-shell set self_signed_cert to true. Enable Reply by emailSee the “Reply by email” documentation for more information on how to set this up. LDAP AuthenticationYou can configure LDAP authentication in config/gitlab.yml. Please restart GitLab after editing this file. Using Custom Omniauth ProvidersSee the omniauth integration document Build your projectsGitLab can build your projects. To enable that feature you need GitLab Runners to do that for you.Checkout the GitLab Runner section to install it Adding your Trusted ProxiesIf you are using a reverse proxy on a separate machine, you may want to add theproxy to the trusted proxies list. Otherwise users will appear signed in from theproxy’s IP address. You can add trusted proxies in config/gitlab.yml by customizing the trusted_proxiesoption in section 1. Save the file and reconfigure GitLabfor the changes to take effect. Custom Redis ConnectionIf you’d like to connect to a Redis server on a non-standard port or on a different host, you can configure its connection string via the config/resque.yml file. # example production: url: redis://redis.example.tld:6379 If you want to connect the Redis server via socket, then use the “unix:” URL scheme and the path to the Redis socket file in the config/resque.yml file. # example production: url: unix:/path/to/redis/socket Also you can use environment variables in the config/resque.yml file: # example production: url: &lt;%= ENV.fetch(&apos;GITLAB_REDIS_URL&apos;) %&gt; Custom SSH ConnectionIf you are running SSH on a non-standard port, you must change the GitLab user’s SSH config. # Add to /home/git/.ssh/config host localhost # Give your setup a name (here: override localhost) user git # Your remote git user port 2222 # Your port number hostname 127.0.0.1; # Your server name or IP You also need to change the corresponding options (e.g. ssh_user, ssh_host, admin_uri) in the config\\gitlab.yml file. Additional Markup StylesApart from the always supported markdown style there are other rich text files that GitLab can display. But you might have to install a dependency to do so. Please see the github-markup gem readme for more information. Troubleshooting“You appear to have cloned an empty repository.”If you see this message when attempting to clone a repository hosted by GitLab,this is likely due to an outdated Nginx or Apache configuration, or a missing ormisconfigured gitlab-workhorse instance. Double-check that you’veinstalled Go, installed gitlab-workhorse,and correctly configured Nginx. google-protobuf “LoadError: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.14’ not found”This can happen on some platforms for some versions of thegoogle-protobuf gem. The workaround is to install a source-onlyversion of this gem.","tags":[]},{"title":"Hello World","date":"2018-10-14T09:51:37.771Z","path":"2018/10/14/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]